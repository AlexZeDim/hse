{"version":3,"file":"hse.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\r\n * На вход подается натуральное четырехзначное число N,\r\n * вывести YES, если сумма крайних цифр равна сумме средних. Вывести NO в противном случае.\r\n * @param number {number}\r\n */\r\nexport const task1 = (number: number): string => {\r\n  const stringNumber: string = number.toString();\r\n  if (stringNumber.length === 4) {\r\n    const array: string[] = Array.from(stringNumber);\r\n    const outer: number = parseInt(array[0]) + parseInt(array[3]);\r\n    const inner: number = parseInt(array[1]) + parseInt(array[2]);\r\n    if (outer === inner) return 'YES';\r\n  }\r\n  return 'NO';\r\n};\r\n\r\n/**\r\n * На вход подаются два числа: N и M.\r\n * Напишите программу, которая умножает первое число на 5, если оно больше второго по абсолютной величине.\r\n * @param n {number}\r\n * @param m {number}\r\n */\r\nexport const task2 = (n: number, m: number): number[] => {\r\n  if (Math.abs(n) > Math.abs(m)) return [n * 5, m];\r\n  return [n, m];\r\n};\r\n\r\n/**\r\n * На вход подается натуральное число N. Напишите программу вычисления выражения: 1 / (N * (N + 1))\r\n * @param number {number}\r\n */\r\nexport const task3 = (number: number): number => {\r\n  let sum: number = 0;\r\n  for (let i = 1; i <= number; i++) {\r\n    sum += (1 / (i * (i + 1)));\r\n  }\r\n  return parseFloat(sum.toString().slice(0, 5));\r\n};\r\n\r\n/**\r\n * Даны значения одномерного массива размером 20 элементов.\r\n * Преобразовать исходный массив, заменив нулями элементы между первым и вторым отрицательными.\r\n * @param array {number[]}\r\n */\r\nexport const task4 = (array: number[]): number[] => {\r\n  interface Negatives {\r\n    first: number;\r\n    second: number;\r\n  }\r\n  const negatives: Negatives = { first: 0, second: 0 };\r\n  if (Array.isArray(array) && array.length > 0) {\r\n    for (let i: number = 0; i < array.length; i++) {\r\n      //exit loop if negatives found\r\n      if (negatives.first !== 0 && negatives.second !== 0) break;\r\n      if (array[i] < 0) {\r\n        if (negatives.first === 0) {\r\n          negatives.first = i;\r\n        } else if (negatives.second === 0) {\r\n          negatives.second = i;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (negatives.first && negatives.second) {\r\n    //rebuild original array via map\r\n    return array.map((n: number, i: number) => (i > negatives.first && i < negatives.second ? 0 : n));\r\n  }\r\n  return array;\r\n};\r\n"],"names":["number","stringNumber","toString","length","array","Array","from","parseInt","n","m","Math","abs","sum","i","parseFloat","slice","negatives","first","second","isArray","map"],"mappings":"kFAKsBA,UACdC,EAAuBD,EAAOE,cACR,IAAxBD,EAAaE,OAAc,OACvBC,EAAkBC,MAAMC,KAAKL,MACbM,SAASH,EAAM,IAAMG,SAASH,EAAM,MACpCG,SAASH,EAAM,IAAMG,SAASH,EAAM,IACrC,MAAO,YAEvB,oBASY,CAACI,EAAWC,IAC3BC,KAAKC,IAAIH,GAAKE,KAAKC,IAAIF,GAAW,CAAK,EAAJD,EAAOC,GACvC,CAACD,EAAGC,iBAOST,QAChBY,EAAc,MACb,IAAIC,EAAI,EAAGA,GAAKb,EAAQa,IAC3BD,GAAQ,GAAKC,GAAKA,EAAI,WAEjBC,WAAWF,EAAIV,WAAWa,MAAM,EAAG,mBAQtBX,UAKdY,EAAuB,CAAEC,MAAO,EAAGC,OAAQ,MAC7Cb,MAAMc,QAAQf,IAAUA,EAAMD,OAAS,MACpC,IAAIU,EAAY,EAAGA,EAAIT,EAAMD,SAER,IAApBa,EAAUC,OAAoC,IAArBD,EAAUE,QAFCL,IAGpCT,EAAMS,GAAK,IACW,IAApBG,EAAUC,MACZD,EAAUC,MAAQJ,EACY,IAArBG,EAAUE,SACnBF,EAAUE,OAASL,WAKvBG,EAAUC,OAASD,EAAUE,OAExBd,EAAMgB,IAAI,CAACZ,EAAWK,IAAeA,EAAIG,EAAUC,OAASJ,EAAIG,EAAUE,OAAS,EAAIV,GAEzFJ"}